I"	3<h3 id="颜色分类">颜色分类</h3>
<h4 id="描述">描述</h4>
<p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
注意:
不能使用代码库中的排序函数来解决这道题。
示例:
输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：
一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-colors
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="思路">思路</h4>

<ul>
  <li>只能扫描一趟且复杂度为1,一般是双指针或者是三指针, 通过交换位置来实现</li>
  <li>只有三种颜色, 扫描一趟用一个指针, 标记0为一个指针, 标记一个2为一个指针, 这两个排序好了,第三个颜色也就排序好了</li>
  <li>扫描过后, 已标记好那么就可以指针移动了,否则继续扫描</li>
</ul>

<blockquote>
  <p>给出的特定的条件往往是解题的关键</p>
  <ul>
    <li>原地, 0(n)复杂度往往是双指针,三指针问题.</li>
    <li>如果是单指针,你要想拿到这个数可以干什么,有什么意义</li>
    <li>细节问题,为什么移动之后不需要再比较(已经比较之后的不需要再比较)</li>
  </ul>
</blockquote>

<h4 id="实现">实现</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">_0075_颜色分类</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sortColors</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>

        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span><span class="o">++,</span> <span class="n">j</span><span class="o">++);</span>
            <span class="o">}</span><span class="k">else</span>  <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">--);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span> <span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">)</span> <span class="o">{</span>
         <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
         <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
         <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
         
     <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="链表的删除">链表的删除</h3>
<h4 id="描述-1">描述</h4>
<p>删除链表中等于给定值 val 的所有节点。
示例:
输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6
输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-linked-list-elements
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="思路-1">思路</h4>
<ul>
  <li>虚拟头结点的使用是为了防止Head.next为空的情况,避免繁琐的判断</li>
  <li>确定一个新链表通常有头部, 尾部节点, 而尾部节点的两个作用
    <ul>
      <li>保持头部节点的状态</li>
      <li>保持新链表的特性</li>
    </ul>
  </li>
</ul>

<h4 id="实现-1">实现</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">_2_203_移除链表的元素</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">ListNode</span> <span class="nf">removeElements</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">newHead</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="nc">ListNode</span> <span class="n">newTail</span> <span class="o">=</span> <span class="n">newHead</span><span class="o">;</span>
        
        <span class="k">while</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 新节点与链表产生关联</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="n">head</span><span class="o">.</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
                 <span class="n">newTail</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
                <span class="n">newTail</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">newTail</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        
        <span class="k">return</span> <span class="n">newHead</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="字符串轮转">字符串轮转</h3>
<h4 id="描述-2">描述</h4>
<p>字符串轮转。给定两个字符串s1和s2，请编写代码检查s2是否为s1旋转而成（比如，waterbottle是erbottlewat旋转后的字符串）。</p>

<p>示例1:</p>

<p>输入：s1 = “waterbottle”, s2 = “erbottlewat”
 输出：True
示例2:</p>

<p>输入：s1 = “aa”, “aba”
 输出：False
提示：</p>

<p>字符串长度在[0, 100000]范围内。
说明:</p>

<p>你能只调用一次检查子串的方法吗？</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-rotation-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="思路-2">思路</h4>
<ul>
  <li>根据提示只调用一次子串检查, 说明有和子串有关系, 既然是子串有关, 试着讲s1 + s1 形成一个更大的串</li>
  <li>通过观察规律, 旋转词为s1 + s1 的子串</li>
  <li>
    <p>检查子串也可以用KMP算法, 但是手写不现实. 所以可以调用系统自带的.如果是考察排序,当然不可以调用系统自带的排序方法</p>
  </li>
  <li>
    <p>其实就是BA == AB?(首位相接) , 那么就是复制自身一个然后变成查找子串的一个问题.(ABAB)</p>
  </li>
  <li>
    <p>如果一个字符串是另一个字符串的旋转，那么它就是在某个特定点上的旋转。例如，字符串waterbottle在3处的旋转意味着在第三个字符处切割waterbottle，并在左半部分（wat）之前放置右半部分（erbottle）</p>
  </li>
  <li>本质上，我们是在寻找是否有一种方式可以把第一个字符串分成两部分，即x和y，如此一来，第一个字符串就是xy，第二个字符串就是yx。例如，x = wat，y = erbottle。那么，第一个字符串xy = waterbottle，第二个字符串yx = erbottlewat。</li>
</ul>

<h4 id="实现-2">实现</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">_5_面试题_0109字符串轮转</span> <span class="o">{</span>
     
       <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isFlipedString</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
           
           <span class="k">if</span> <span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
           
           <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
           
           <span class="k">return</span> <span class="o">(</span><span class="n">s1</span> <span class="o">+</span> <span class="n">s1</span><span class="o">).</span><span class="na">contains</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
           

         <span class="o">}</span>

<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET