I"<h3 id="ios组件化探索之路理论篇">iOS组件化探索之路(理论篇)</h3>
<ol>
  <li>随着应用需求逐步迭代，应用的代码体积将会越来越大，为了更好的管理应用工程，我们开始借助CocoaPods版本管理工具对原有应用工程进行拆分。</li>
  <li>但是仅仅完成代码拆分还不足以解决业务之间的代码耦合，为了更好的让拆分出去的业务工程能够独立运行，必须进行组件拆分并且实现组件服务化。
<!-- more -->
    <h4 id="什么是组件化">什么是组件化</h4>
    <ul>
      <li>将一个单一工程的项目, 分解成为各个独立的组件; 然后按照某种方式, 任意组织成一个拥有完整业务逻辑的工程</li>
    </ul>
  </li>
</ol>

<h4 id="为什么需要组件化">为什么需要组件化</h4>
<ul>
  <li>如果是单一工程, 业务线比较少, 人数比较少, 一般的开发模式没有任何问题</li>
  <li>但是一旦项目发展慢慢庞大, 业务主线增多,开发人员增多, 就会暴露出一系列问题
    <ul>
      <li>耦合比较严重</li>
      <li>编译速度慢</li>
      <li>测试不独立</li>
      <li>无法使用自己擅长的设计模式</li>
    </ul>
  </li>
</ul>

<h4 id="组件化最终可达到的效果">组件化最终可达到的效果</h4>
<ul>
  <li>组件的独立
    <ul>
      <li>独立编写</li>
      <li>独立编译</li>
      <li>独立运行</li>
      <li>独立测试</li>
    </ul>
  </li>
  <li>资源的重用→功能代码的重复使用</li>
  <li>高效的迭代→灵活增删模块</li>
  <li>代码二进制化, 最大化的提高项目编译速度</li>
</ul>

<h4 id="组件化实践需要考虑的问题">组件化实践需要考虑的问题</h4>
<ul>
  <li>需要把哪些内容划分成为一个组件?
    <ul>
      <li>基础组件
        <ul>
          <li>基本配置
            <ul>
              <li>常量</li>
              <li>宏</li>
              <li>…</li>
            </ul>
          </li>
          <li>分类(各种系统类的扩展)</li>
          <li>网络
            <ul>
              <li>对AFN的封装</li>
              <li>对SDWebImage的封装</li>
              <li>对Socket的封装</li>
              <li>…</li>
            </ul>
          </li>
          <li>工具类
            <ul>
              <li>日期时间处理</li>
              <li>文件处理</li>
              <li>…</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>功能组件
        <ul>
          <li>控件
            <ul>
              <li>轮播器</li>
              <li>选项菜单</li>
              <li>图文菜单</li>
              <li>….</li>
            </ul>
          </li>
          <li>功能
            <ul>
              <li>音频处理</li>
              <li>断点下载</li>
              <li>交易处理</li>
              <li>…</li>
            </ul>
          </li>
          <li>业务组件
            <ul>
              <li>业务线1
                <ul>
                  <li>子业务线1</li>
                  <li>子业务线2</li>
                  <li>…</li>
                </ul>
              </li>
              <li>业务线2
                <ul>
                  <li>子业务线1</li>
                  <li>子业务线2</li>
                  <li>…</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>每个组件以一个什么样的形式存在?
    <ul>
      <li>组件内部根据设计模式进行划分文件夹结构</li>
      <li>组件以pod的形式存在</li>
      <li>组件以单独的测试进行存在</li>
    </ul>
  </li>
  <li>以怎样的形式集成各个组件?
    <ul>
      <li>通过cocoapods的形式安装各个组件</li>
    </ul>
  </li>
  <li>组件之间如何通讯?
    <ul>
      <li>披露公开API</li>
      <li>通过中间件的中转</li>
    </ul>
  </li>
  <li>如何提高编译速度?
    <ul>
      <li>采用二进制化提高编译速度</li>
    </ul>
  </li>
  <li>如何解决重复的流程操作?
    <ul>
      <li>采取自动化流程</li>
    </ul>
  </li>
  <li>组件化过程中, 解耦组件间的依赖关系
    <ul>
      <li>如果一个组件里面依赖的其他公共功能, 该如何处理?
        <ul>
          <li>直接copy代码。虽然恶心, 但是它的好处就是快, 无额外依赖。对于一些不重要的工具方法，也可以直接copy到内部来用。</li>
          <li>把组件依赖的代码先做成一个Pod库，然后依赖Pod库。</li>
        </ul>
      </li>
      <li>如果组件内部, 需要对接某个服务, 该如何处理?
        <ul>
          <li>使用一个block或delegate（协议）把这部分职责丢出去。</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

:ET