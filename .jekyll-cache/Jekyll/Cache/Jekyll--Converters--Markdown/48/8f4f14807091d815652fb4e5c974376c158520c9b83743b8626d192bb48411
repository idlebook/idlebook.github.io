I"jH<p>其实这篇文章的缘起是由于在对 <a href="https://github.com/onevcat/Kingfisher/">Kingfisher</a> 做重构的时候，因为自己对 <code class="highlighter-rouge">defer</code> 的理解不够准确，导致了一个 bug。所以想藉由这篇文章探索一下 <code class="highlighter-rouge">defer</code> 这个关键字的一些 edge case。</p>

<h3 id="典型用法">典型用法</h3>

<p>Swift 里的 <code class="highlighter-rouge">defer</code> 大家应该都很熟悉了，<code class="highlighter-rouge">defer</code> 所声明的 block 会在当前代码执行退出后被调用。正因为它提供了一种延时调用的方式，所以一般会被用来做资源释放或者销毁，这在某个函数有多个返回出口的时候特别有用。比如下面的通过 <code class="highlighter-rouge">FileHandle</code> 打开文件进行操作的方法：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">operateOnFile</span><span class="p">(</span><span class="nv">descriptor</span><span class="p">:</span> <span class="kt">Int32</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">fileHandle</span> <span class="o">=</span> <span class="kt">FileHandle</span><span class="p">(</span><span class="nv">fileDescriptor</span><span class="p">:</span> <span class="n">descriptor</span><span class="p">)</span>
    
    <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">fileHandle</span><span class="o">.</span><span class="nf">readDataToEndOfFile</span><span class="p">()</span>

    <span class="k">if</span> <span class="cm">/* onlyRead */</span> <span class="p">{</span>
        <span class="n">fileHandle</span><span class="o">.</span><span class="nf">closeFile</span><span class="p">()</span>
        <span class="k">return</span>
    <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">shouldWrite</span> <span class="o">=</span> <span class="cm">/* 是否需要写文件 */</span>
    <span class="k">guard</span> <span class="n">shouldWrite</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">fileHandle</span><span class="o">.</span><span class="nf">closeFile</span><span class="p">()</span>
        <span class="k">return</span>
    <span class="p">}</span>
    
    <span class="n">fileHandle</span><span class="o">.</span><span class="nf">seekToEndOfFile</span><span class="p">()</span>
    <span class="n">fileHandle</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="n">someData</span><span class="p">)</span>
    <span class="n">fileHandle</span><span class="o">.</span><span class="nf">closeFile</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>我们在不同的地方都需要调用 <code class="highlighter-rouge">fileHandle.closeFile()</code> 来关闭文件，这里更好的做法是用 <code class="highlighter-rouge">defer</code> 来统一处理。这不仅可以让我们就近在资源申请的地方就声明释放，也减少了未来添加代码时忘记释放资源的可能性：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">operateOnFile</span><span class="p">(</span><span class="nv">descriptor</span><span class="p">:</span> <span class="kt">Int32</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">fileHandle</span> <span class="o">=</span> <span class="kt">FileHandle</span><span class="p">(</span><span class="nv">fileDescriptor</span><span class="p">:</span> <span class="n">descriptor</span><span class="p">)</span>
    <span class="k">defer</span> <span class="p">{</span> <span class="n">fileHandle</span><span class="o">.</span><span class="nf">closeFile</span><span class="p">()</span> <span class="p">}</span>
    <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">fileHandle</span><span class="o">.</span><span class="nf">readDataToEndOfFile</span><span class="p">()</span>

    <span class="k">if</span> <span class="cm">/* onlyRead */</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">shouldWrite</span> <span class="o">=</span> <span class="cm">/* 是否需要写文件 */</span>
    <span class="k">guard</span> <span class="n">shouldWrite</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
    <span class="n">fileHandle</span><span class="o">.</span><span class="nf">seekToEndOfFile</span><span class="p">()</span>
    <span class="n">fileHandle</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="n">someData</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="defer-的作用域"><code class="highlighter-rouge">defer</code> 的作用域</h3>

<p>在做 Kingfisher 重构时，对线程安全的保证我选择使用了 <code class="highlighter-rouge">NSLock</code> 来完成。简单说，会有一些类似这样的方法：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">lock</span> <span class="o">=</span> <span class="kt">NSLock</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">tasks</span><span class="p">:</span> <span class="p">[</span><span class="kt">ID</span><span class="p">:</span> <span class="kt">Task</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

<span class="kd">func</span> <span class="nf">remove</span><span class="p">(</span><span class="n">_</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">ID</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="p">{</span> <span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span> <span class="p">}</span>
    <span class="n">tasks</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>对于 <code class="highlighter-rouge">tasks</code> 的操作可能发生在不同线程中，用 <code class="highlighter-rouge">lock()</code> 来获取锁，并保证当前线程独占，然后在操作完成后使用 <code class="highlighter-rouge">unlock()</code> 释放资源。这是很典型的 <code class="highlighter-rouge">defer</code> 的使用方式。</p>

<p>但是后来出现了一种情况，即调用 <code class="highlighter-rouge">remove</code> 方法之前，我们在同一线程的 caller 中获取过这个锁了，比如：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">doSomethingThenRemove</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="p">{</span> <span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span> <span class="p">}</span>
    
    <span class="c1">// 操作 `tasks`</span>
    <span class="c1">// ...</span>
    
    <span class="c1">// 最后，移除 `task`</span>
    <span class="nf">remove</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这样做显然在 <code class="highlighter-rouge">remove</code> 中造成了死锁 (deadlock)：<code class="highlighter-rouge">remove</code> 里的 <code class="highlighter-rouge">lock()</code> 在等待 <code class="highlighter-rouge">doSomethingThenRemove</code> 中做 <code class="highlighter-rouge">unlock()</code> 操作，而这个 <code class="highlighter-rouge">unlock</code> 被 <code class="highlighter-rouge">remove</code> 阻塞了，永远不可能达到。</p>

<p>解决的方法大概有三种：</p>

<ol>
  <li>换用 <code class="highlighter-rouge">NSRecursiveLock</code>：<a href="https://developer.apple.com/documentation/foundation/nsrecursivelock"><code class="highlighter-rouge">NSRecursiveLock</code></a> 可以在同一个线程获取多次，而不造成死锁的问题。</li>
  <li>在调用 <code class="highlighter-rouge">remove</code> 之前先 <code class="highlighter-rouge">unlock</code>。</li>
  <li>为 <code class="highlighter-rouge">remove</code> 传入按照条件，避免在其中加锁。</li>
</ol>

<p>1 和 2 都会造成额外的性能损失，虽然在一般情况下这样的加锁性能微乎其微，但是使用方案 3 似乎也并不很麻烦。于是我很开心地把 <code class="highlighter-rouge">remove</code> 改成了这样：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">remove</span><span class="p">(</span><span class="n">_</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">ID</span><span class="p">,</span> <span class="nv">acquireLock</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">acquireLock</span> <span class="p">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
        <span class="k">defer</span> <span class="p">{</span> <span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">tasks</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>很好，现在调用 <code class="highlighter-rouge">remove(123, acquireLock: false)</code> 不再会死锁了。但是很快我发现，在 <code class="highlighter-rouge">acquireLock</code> 为 <code class="highlighter-rouge">true</code> 的时候锁也失效了。再仔细阅读 Swift Programming Language 关于 <code class="highlighter-rouge">defer</code> 的描述：</p>

<blockquote>
  <p>A <code class="highlighter-rouge">defer</code> statement is used for executing code just before transferring program control outside of <strong>the scope that the defer statement appears in</strong>.</p>
</blockquote>

<p>所以，上面的代码其实相当于：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">remove</span><span class="p">(</span><span class="n">_</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">ID</span><span class="p">,</span> <span class="nv">acquireLock</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">acquireLock</span> <span class="p">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="nf">lock</span><span class="p">()</span>
        <span class="n">lock</span><span class="o">.</span><span class="nf">unlock</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="n">tasks</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>GG 斯密达…</p>

<p>以前很单纯地认为 <code class="highlighter-rouge">defer</code> 是在函数退出的时候调用，并没有注意其实是<strong>当前 scope 退出的时候</strong>调用这个事实，造成了这个错误。在 <code class="highlighter-rouge">if</code>，<code class="highlighter-rouge">guard</code>，<code class="highlighter-rouge">for</code>，<code class="highlighter-rouge">try</code> 这些语句中使用 <code class="highlighter-rouge">defer</code> 时，应该要特别注意这一点。</p>

<h3 id="defer-和闭包"><code class="highlighter-rouge">defer</code> 和闭包</h3>

<p>另一个比较有意思的事实是，虽然 <code class="highlighter-rouge">defer</code> 后面跟了一个闭包，但是它更多地像是一个语法糖，和我们所熟知的闭包特性不一样，并不会持有里面的值。比如：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">number</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">defer</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"Statement 2: </span><span class="se">\(</span><span class="n">number</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Statement 1: </span><span class="se">\(</span><span class="n">number</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>将会输出：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Statement 1: 100
Statement 2: 100
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">defer</code> 中如果要依赖某个变量值时，需要自行进行复制：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">number</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">var</span> <span class="nv">closureNumber</span> <span class="o">=</span> <span class="n">number</span>
    <span class="k">defer</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"Statement 2: </span><span class="se">\(</span><span class="n">closureNumber</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Statement 1: </span><span class="se">\(</span><span class="n">number</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Statement 1: 100</span>
<span class="c1">// Statement 2: 1</span>
</code></pre></div></div>

<h3 id="defer-的执行时机"><code class="highlighter-rouge">defer</code> 的执行时机</h3>

<p><code class="highlighter-rouge">defer</code> 的执行时机紧接在离开作用域之后，但是是在其他语句之前。这个特性为 <code class="highlighter-rouge">defer</code> 带来了一些很“微妙”的使用方式。比如从 <code class="highlighter-rouge">0</code> 开始的自增：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Foo</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">num</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">func</span> <span class="nf">foo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">defer</span> <span class="p">{</span> <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
        <span class="k">return</span> <span class="n">num</span>
    <span class="p">}</span>
    
    <span class="c1">// 没有 `defer` 的话我们可能要这么写</span>
    <span class="c1">// func foo() -&gt; Int {</span>
    <span class="c1">//    num += 1</span>
    <span class="c1">//    return num - 1</span>
    <span class="c1">// }</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">f</span> <span class="o">=</span> <span class="kt">Foo</span><span class="p">()</span>
<span class="n">f</span><span class="o">.</span><span class="nf">foo</span><span class="p">()</span> <span class="c1">// 0</span>
<span class="n">f</span><span class="o">.</span><span class="nf">foo</span><span class="p">()</span> <span class="c1">// 1</span>
<span class="n">f</span><span class="o">.</span><span class="n">num</span>   <span class="c1">// 2</span>
</code></pre></div></div>

<p>输出结果 <code class="highlighter-rouge">foo()</code> 返回了 <code class="highlighter-rouge">+1</code> 之前的 <code class="highlighter-rouge">num</code>，而 <code class="highlighter-rouge">f.num</code> 则是 <code class="highlighter-rouge">defer</code> 中经过 <code class="highlighter-rouge">+1</code> 之后的结果。不使用 <code class="highlighter-rouge">defer</code> 的话，我们其实很难达到这种“在返回后进行操作”的效果。</p>

<p>虽然很特殊，<strong>但是强烈不建议在 <code class="highlighter-rouge">defer</code> 中执行这类 side effect</strong>。</p>

<blockquote>
  <p>This means that a <code class="highlighter-rouge">defer</code> statement can be used, for example, to perform manual resource management such as closing file descriptors, and to perform actions that need to happen even if an error is thrown.</p>
</blockquote>

<p>从语言设计上来说，<code class="highlighter-rouge">defer</code> 的目的就是进行资源清理和避免重复的返回前需要执行的代码，而不是用来以取巧地实现某些功能。这样做只会让代码可读性降低。</p>

:ET